#include <Adafruit_NeoPixel.h>
#include <IRremote.hpp>
#include <Wire.h>

#define ACTION_INTERVAL 500

// Define pin numbers
const int buttonPin = 4;         // Pin connected to the button
const int ledPin = LED_BUILTIN;  // Pin connected to the built-in LED
const int irPin = 5;             // Pin connected to the IR transmitter
const int ledStripPin = 3;       //Pin connected to LED strip
const int pixelCount = 8;
const int buzzerPin = 2;
int bulletCount = 6;
unsigned long lastActionTime = 0;

IRsend irsend(irPin);
Adafruit_NeoPixel pixels(pixelCount, ledStripPin, NEO_GRB + NEO_KHZ800);

// Variables to hold the button state
int buttonState = 0;  // Current state of the button
bool isReloading = false;
bool isFiring = false;

// Color(255,0,0) is light red
// Color(0,0,0) is black (No color)
void reload() {
  Serial.println("Reloading");
  tone(buzzerPin, 3000);
  pixels.fill(pixels.Color(255, 0, 0), 0, 6);
  pixels.show();
  delay(500);
  noTone(buzzerPin);
  pixels.fill(pixels.Color(0, 0, 0), 0, 6);
  pixels.show();
  delay(500);
  tone(buzzerPin, 3000);
  pixels.fill(pixels.Color(255, 0, 0), 0, 6);
  pixels.show();
  delay(500);
  noTone(buzzerPin);
  pixels.fill(pixels.Color(0, 0, 0), 0, 6);
  pixels.show();
  delay(500);
  tone(buzzerPin, 3000);
  pixels.fill(pixels.Color(255, 0, 0), 0, 6);
  pixels.show();
  delay(500);
  noTone(buzzerPin);
  pixels.fill(pixels.Color(0, 0, 0), 0, 6);
  pixels.show();
  delay(500);
}

//Checks bulletCount and then displays the corresponding number of LEDs
void checkBulletCount() {
  isReloading = true; 
  switch (bulletCount) {
    case 0:
      pixels.fill(pixels.Color(0, 0, 0), 0, 6);
      break;
    case 1:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
    case 2:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
    case 3:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
    case 4:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
    case 5:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
    case 6:
      pixels.fill(pixels.Color(255, 0, 0), 0, bulletCount);
      pixels.fill(pixels.Color(0, 0, 0), bulletCount, 6 - bulletCount);
      break;
  }
  pixels.show();
  isReloading = false;
}

void setup() {
  Serial.begin(115200);
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);
  IrSender.begin(irPin);
  pixels.begin();
  pixels.setBrightness(60);
}

void loop() {
  // Read the state of the button
  buttonState = digitalRead(buttonPin);
  checkBulletCount();
  // Check if the button is pressed
  if (buttonState == HIGH && bulletCount > 0 && !isReloading) {
    unsigned long currentTime = millis();
    if (currentTime - lastActionTime > ACTION_INTERVAL) {
      digitalWrite(ledPin, HIGH);
      IrSender.sendNEC(0x0102, 0x34, 0);  // the address 0x0102 with the command 0x34 is sent
      bulletCount--;
      checkBulletCount();
      tone(buzzerPin, 2000);
      delay(200);
      noTone(buzzerPin);
      Serial.println(bulletCount);
      lastActionTime = currentTime;
    }
  } else if (bulletCount == 0) {
    reload();
    checkBulletCount();
    bulletCount = 6;
  } else {
    digitalWrite(ledPin, LOW);
  }
}
